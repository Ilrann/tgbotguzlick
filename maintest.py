import telebot
from telebot import types
import time

# –í–∞—à —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É BotFather
TOKEN = '6503039781:AAFOqof_Ve6phNTUIO3BGsyx09CJT8ZTk_o'

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
current_section = None

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
current_question = 0

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
last_answer_time = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
results = {}

# –í–æ–ø—Ä–æ—Å—ã –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
questions = {
    "–õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã": [
        {"question": "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –ë–æ–ª–≥–∞—Ä–∏–∏?", "answers": ["–ë—É—Ö–∞—Ä–µ—Å—Ç", "–°–æ—Ñ–∏—è", "–ù–µ–∞–ø–æ–ª—å"], "correct_answer": 1},
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –º–∞–ª–µ–Ω—å–∫–æ–π –ø–æ –ø–ª–æ—â–∞–¥–∏ –≤ –ï–≤—Ä–æ–ø–µ?",
         "answers": ["–õ–∏—Ö—Ç–µ–Ω—à—Ç–µ–π–Ω", "–í–∞—Ç–∏–∫–∞–Ω", "–ê–Ω–¥–æ—Ä—Ä–∞"], "correct_answer": 1},
        {"question": "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤?", "answers": ["–ë—Ä—é—Å—Å–µ–ª—å", "–ê–º—Å—Ç–µ—Ä–¥–∞–º", "–ì–∞–∞–≥–∞"], "correct_answer": 1},
        {"question": "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–µ–π –∫—É–ª—å—Ç—É—Ä—ã –≤ 2022 –≥–æ–¥—É?", "answers": ["–ü–∞—Ä–∏–∂", "–õ–æ–Ω–¥–æ–Ω", "–ú–∏–ª–∞–Ω"], "correct_answer": 0},
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è —Å–∞–º–æ–π –º–Ω–æ–≥–æ–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –≤ –ï–≤—Ä–æ–ø–µ?",
         "answers": ["–§—Ä–∞–Ω—Ü–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–†–æ—Å—Å–∏—è"], "correct_answer": 2},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–æ–Ω–∞—Å—Ç—ã—Ä—å –ú–µ—Ç–µ–æ—Ä–∞?", "answers": ["–ò—Å–ø–∞–Ω–∏—è", "–ì—Ä–µ—Ü–∏—è", "–ò—Ç–∞–ª–∏—è"], "correct_answer": 1},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–æ—Ä–æ–¥-–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –ú–æ–Ω–∞–∫–æ?",
         "answers": ["–ò—Å–ø–∞–Ω–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ò—Ç–∞–ª–∏—è"], "correct_answer": 1},
        {"question": "–ö–∞–∫–æ–π –æ—Å—Ç—Ä–æ–≤ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–ø–Ω–µ–π—à–∏–º –≤ –°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–º –º–æ—Ä–µ?",
         "answers": ["–°–∞—Ä–¥–∏–Ω–∏—è", "–ö–∏–ø—Ä", "–°–∏—Ü–∏–ª–∏—è"], "correct_answer": 2},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–æ—Ä–æ–¥ –î—É–±–ª–∏–Ω?", "answers": ["–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è", "–ò—Ä–ª–∞–Ω–¥–∏—è", "–®–≤–µ–π—Ü–∞—Ä–∏—è"], "correct_answer": 1},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–æ—Ä–æ–¥ –ë—É–¥–∞–ø–µ—à—Ç?", "answers": ["–ß–µ—Ö–∏—è", "–°–ª–æ–≤–∞–∫–∏—è", "–í–µ–Ω–≥—Ä–∏—è"],"correct_answer": 3},
    ],
    "–°—Ä–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã": [
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–ø–Ω–µ–π—à–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º –æ–ª–∏–≤–∫–æ–≤–æ–≥–æ –º–∞—Å–ª–∞?",
         "answers": ["–ì—Ä–µ—Ü–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–ò—Ç–∞–ª–∏—è", '–¢—É—Ä–∫—Ü–∏—è'], "correct_answer": 1},
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –∏–º–µ–µ—Ç —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç—Ä–æ–≤–æ–≤ –≤ –ï–≤—Ä–æ–ø–µ?",
         "answers": ["–§–∏–Ω–ª—è–Ω–¥–∏—è", "–ì—Ä–µ—Ü–∏—è", "–®–≤–µ—Ü–∏—è", "–ù–æ—Ä–≤–µ–≥–∏—è"], "correct_answer": 2},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–æ—Ä–∞ –≠–ª—å–±—Ä—É—Å?",
         "answers": ["–†–æ—Å—Å–∏—è", "–ì—Ä—É–∑–∏—è", "–ê—Ä–º–µ–Ω–∏—è", "–¢—É—Ä—Ü–∏—è"], "correct_answer": 0},
        {"question": "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º–æ–π –¥–ª–∏–Ω–Ω–æ–π –≤ –ï–≤—Ä–æ–ø–µ?",
         "answers": ["–í–æ–ª–≥–∞", "–î—É–Ω–∞–π", "–†–µ–π–Ω", "–î–Ω–µ–ø—Ä"], "correct_answer": 0},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ü—Ä–∞–∂—Å–∫–∏–π –≥—Ä–∞–¥?",
         "answers": ["–ß–µ—Ö–∏—è", "–í–µ–Ω–≥—Ä–∏—è", "–ê–≤—Å—Ç—Ä–∏—è", "–°–ª–æ–≤–∞–∫–∏—è"], "correct_answer": 0},
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–ø–Ω–µ–π—à–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º —à–æ–∫–æ–ª–∞–¥–∞ –≤ –º–∏—Ä–µ?",
         "answers": ["–®–≤–µ–π—Ü–∞—Ä–∏—è", "–ë–µ–ª—å–≥–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è"], "correct_answer": 1},
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ –ï–≤—Ä–æ–ø–µ?",
         "answers": ["–ì–µ—Ä–º–∞–Ω–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ò—Ç–∞–ª–∏—è", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"], "correct_answer": 0},
        {"question": "–ö–∞–∫–æ–µ –æ–∑–µ—Ä–æ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º—ã–º –≥–ª—É–±–æ–∫–∏–º –≤ –ï–≤—Ä–æ–ø–µ?", "answers": ["–ë–∞–ª—Ö–∞—à", "–ö–∞—Å–ø–∏–π—Å–∫–æ–µ", "–û–Ω–µ–∂—Å–∫–æ–µ", "–ë–∞–π–∫–∞–ª"],
         "correct_answer": 3},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≥–æ—Ä–æ–¥-–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –ú–æ–Ω–∞–∫–æ?",
         "answers": ["–ò—Å–ø–∞–Ω–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ò—Ç–∞–ª–∏—è", "–ë–µ–ª—å–≥–∏—è"], "correct_answer": 1},
        {"question": "–ö–∞–∫–∞—è –≥–æ—Ä–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Å—Ç–∏—Ä–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å –†–æ—Å—Å–∏–∏ –∏ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞?",
         "answers": ["–ê–ª—å–ø—ã", "–£—Ä–∞–ª—å—Å–∫–∏–µ –≥–æ—Ä—ã", "–ì–∏–º–∞–ª–∞–∏", "–ê–Ω–¥—ã"], "correct_answer": 1},
    ],
     "–°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã": [
        {"question": "–ö–∞–∫–æ–µ –º–æ—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É –ì—Ä–µ—Ü–∏–µ–π –∏ –¢—É—Ä—Ü–∏–µ–π?",
         "answers": ["–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–µ –º–æ—Ä–µ", "–ß–µ—Ä–Ω–æ–µ –º–æ—Ä–µ", "–≠–≥–µ–π—Å–∫–æ–µ –º–æ—Ä–µ", "–ê–¥—Ä–∏–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ—Ä–µ"], "correct_answer": 2},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ê–∫—Ä–æ–ø–æ–ª—å?", "answers": ["–ò—Ç–∞–ª–∏—è", "–ì—Ä–µ—Ü–∏—è", "–¢—É—Ä—Ü–∏—è", '–ë–æ–ª–≥–∞—Ä–∏—è'], "correct_answer": 1},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ö–∞–ø–ø–∞–¥–æ–∫–∏—è?", "answers": ["–ì—Ä–µ—Ü–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–¢—É—Ä—Ü–∏—è", "–ï–≥–∏–ø–µ—Ç"], "correct_answer": 2},
        {"question": "–ö–∞–∫–∞—è —Ä–µ–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞–Ω–∏—Ü–µ–π –º–µ–∂–¥—É –°–µ—Ä–±–∏–µ–π –∏ –•–æ—Ä–≤–∞—Ç–∏–µ–π?",
         "answers": ["–î—É–Ω–∞–π", "–°–∞–≤–∞", "–¢–∏—Å–º–µ–Ω–∏—Ü–∞", "–£–Ω–≥–∞–ª–∞"], "correct_answer": 1},
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –ï–≤—Ä–æ–ø–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–∏?",
         "answers": ["–ì–µ—Ä–º–∞–Ω–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ò—Ç–∞–ª–∏—è", "–£–∫—Ä–∞–∏–Ω–∞"], "correct_answer": 0},
        {"question": "–ö–∞–∫–æ–π —è–∑—ã–∫ —è–≤–ª—è–µ—Ç—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –Ω–∞ –æ—Å—Ç—Ä–æ–≤–∞—Ö –§–∞—Ä–µ—Ä?", "answers": ["–§–∞—Ä–µ—Ä—Å–∫–∏–π", "–ò—Å–ª–∞–Ω–¥—Å–∫–∏–π", "–î–∞—Ç—Å–∫–∏–π", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π"], "correct_answer": 0},
        {"question": "–í –∫–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Å–∞–º–æ–µ –≤—ã—Å–æ–∫–æ–µ –∑–¥–∞–Ω–∏–µ –≤ –ï–≤—Ä–æ–ø–µ?",
         "answers": ["–§—Ä–∞–Ω—Ü–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–†–æ—Å—Å–∏—è", "–¢—É—Ä—Ü–∏—è"], "correct_answer": 3},
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –ï–≤—Ä–æ–ø–µ —è–≤–ª—è–µ—Ç—Å—è –∫—Ä—É–ø–Ω–µ–π—à–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º –ø—Ä–∏—Ä–æ–¥–Ω–æ–≥–æ –≥–∞–∑–∞?",
         "answers": ["–ì–µ—Ä–º–∞–Ω–∏—è", "–ù–æ—Ä–≤–µ–≥–∏—è", "–†–æ—Å—Å–∏—è", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è"], "correct_answer": 2},
        {"question": "–ö–∞–∫–æ–µ –º–æ—Ä–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º–µ–∂–¥—É –ò—Ç–∞–ª–∏–µ–π –∏ –¢—É–Ω–∏—Å–æ–º?",
         "answers": ["–¢–∏—Ä—Ä–µ–Ω—Å–∫–æ–µ –º–æ—Ä–µ", "–ê–¥—Ä–∏–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–æ—Ä–µ", "–ò–æ–Ω–∏—á–µ—Å–∫–æ–µ –º–æ—Ä–µ", "–°—Ä–µ–¥–∏–∑–µ–º–Ω–æ–µ –º–æ—Ä–µ"], "correct_answer": 0},
        {"question": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ –≤ –ï–≤—Ä–æ–ø–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∞?", "answers": ["–ì—Ä–µ—Ü–∏—è", "–ò—Å–ø–∞–Ω–∏—è", "–¢—É—Ä—Ü–∏—è", "–†–æ—Å—Å–∏—è"], "correct_answer": 3},
    ]
}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    results[user_id] = {
        "–õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã": {"correct": 0, "total": 0},
        "–°—Ä–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã": {"correct": 0, "total": 0},
        "–°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã": {"correct": 0, "total": 0},
    }
    markup = types.InlineKeyboardMarkup()
    start_test_button = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")
    markup.add(start_test_button)
    bot.send_message(message.chat.id, f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n–ï—Å–ª–∏ –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –æ—Ç–≤–µ—á–∞—Ç—åüòä-/start", reply_markup=markup)
    print(f'@{message.from_user.username}',message.from_user.first_name)


@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, "–ü–†–ï–ñ–î–ï –ß–ï–ú –ß–¢–û –¢–û –¢–´–ö–ê–¢–¨ –ü–†–û–ü–ò–®–ò /startüòä")


@bot.callback_query_handler(func=lambda call: call.data == "start_test")
def start_test_callback(call):
    user_id = call.from_user.id
    results[user_id]["current_section"] = None
    results[user_id]["current_question"] = 0  # –û–±–Ω—É–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    choice_level(call.message)


def choice_level(message):
    markup = types.InlineKeyboardMarkup()
    btn_1 = types.InlineKeyboardButton("–õ–µ–≥–∫–∏–π", callback_data="–õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã")
    btn_2 = types.InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data="–°—Ä–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã")
    btn_3 = types.InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π", callback_data="–°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã")
    markup.add(btn_1, btn_2, btn_3)
    bot.send_message(message.chat.id, f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["–õ–µ–≥–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã", "–°—Ä–µ–¥–Ω–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã", "–°–ª–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≥–µ–æ–≥—Ä–∞—Ñ–∏–∏ –ï–≤—Ä–æ–ø—ã"])
def handle_section_choice(call):
    user_id = call.from_user.id
    results[user_id]["current_section"] = call.data
    results[user_id]["current_question"] = 0  # –î–æ–±–∞–≤–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª '{results[user_id]['current_section']}'.")
    send_next_question(call.message.chat.id, user_id)


def send_next_question(chat_id, user_id):
    if user_id not in results:
        return

    current_section = results[user_id]["current_section"]
    current_question = results[user_id]["current_question"]

    if current_section in questions and 0 <= current_question < len(questions[current_section]):
        question = questions[current_section][current_question]["question"]
        answers = questions[current_section][current_question]["answers"]

        markup = types.InlineKeyboardMarkup()
        for i, answer in enumerate(answers):
            button = types.InlineKeyboardButton(answer, callback_data=f"answer_{i}")
            markup.add(button)

        bot.send_message(chat_id, f"–í–æ–ø—Ä–æ—Å {current_question + 1}:\n{question}", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_'))
def handle_answer(call):
    user_id = call.from_user.id
    if user_id not in results:
        bot.send_message(call.message.chat.id, "–¢–µ—Å—Ç –Ω–µ –±—ã–ª –Ω–∞—á–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞.")
        return

    current_section = results[user_id]["current_section"]
    current_question = results[user_id]["current_question"]

    if current_section not in questions:
        bot.send_message(call.message.chat.id, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ—Å—Ç.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
    if user_id in last_answer_time:
        current_time = time.time()
        time_difference = current_time - last_answer_time[user_id]
        if time_difference < 2:
            bot.send_message(call.message.chat.id, f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞.üò¥")
            return

    answer_index = int(call.data.split('_')[1])
    correct_answer = questions[current_section][current_question]["correct_answer"]
    if answer_index == correct_answer:
        results[user_id][current_section]["correct"] += 1
        response = "–ü—Ä–∞–≤–∏–ª—å–Ω–æ! üéâ"
    else:
        response = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. üòî"

    bot.send_message(call.message.chat.id, response)

    current_question += 1
    results[user_id]["current_question"] = current_question  # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    last_answer_time[user_id] = time.time()

    if current_question < len(questions[current_section]):
        send_next_question(call.message.chat.id, user_id)
    else:
        show_results(call.message.chat.id, user_id, call)


def show_results(chat_id, user_id,call):
    current_section = results[user_id]["current_section"]
    correct = results[user_id][current_section]["correct"]
    total = len(questions[current_section])
    result_text = f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}"
    markup = types.InlineKeyboardMarkup()
    btn_1 = types.InlineKeyboardButton("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="Main menu")
    markup.add(btn_1)
    bot.send_message(chat_id, result_text, reply_markup=markup)
    print(f'@{call.from_user.username}', call.from_user.first_name, f"{current_section}: {correct} –∏–∑ {total}")


@bot.callback_query_handler(func=lambda call: call.data == "Main menu")
def start_test_callback(call):
    markup = types.InlineKeyboardMarkup()
    start_test_button = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_test")
    markup.add(start_test_button)
    bot.send_message(call.message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=markup)


@bot.message_handler(commands=['update top-list#228192228192'])
def toplist(call):
    bot.send_message(call.message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –≥–æ—Ä–æ–¥ –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.")


# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
bot.polling(none_stop=True)